// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @param {Bool} $self [false] - Whether or not to include current selector
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Kitty Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}


//  Breakpoints
//-------------------------------------------------------
$lg-bp:  1440px;
$md-bp:  1200px;
$sm-bp:  1023px;
$sm2-bp: 768px;
$sm3-bp: 932px;
$xs-bp:  480px;
$xxs-bp: 350px;


$breakpoints: (
  lg:  $lg-bp,
  md:  $md-bp,
  sm:  $sm-bp,
  sm2: $sm2-bp,
  sm3: $sm3-bp,
  xs:  $xs-bp,
  xxs: $xxs-bp
);

// viewport width < than breakpoint
//-------------------------------------------------------
@mixin media($bp) {
  @if map-has-key($breakpoints, $bp) == true {
    @media (max-width: map-get($breakpoints, $bp)) {
      @content;
    }
  }
  @else {
    @media (max-width: $bp) {
      @content;
    }
  }
}

// viewport width > than breakpoint
//-------------------------------------------------------
@mixin media-up($bp) {
  @if map-has-key($breakpoints, $bp) == true {
    @media (min-width: (map-get($breakpoints, $bp) + 1px)) {
      @content;
    }
  }
  @else {
    @media (min-width: $bp) {
      @content;
    }
  }
}

// viewport width between 2 breakpoints
//-------------------------------------------------------
@mixin media-between($bp1, $bp2) {
  @if map-has-key($breakpoints, $bp1) == true {
    $bp1: map-get($breakpoints, $bp1)
  }
  @if map-has-key($breakpoints, $bp2) == true {
    $bp2: map-get($breakpoints, $bp2)
  }

  @media (min-width: $bp1) and (max-width: $bp2) {
    @content;
  }
}


// Images aspect ratio
//------------------------------------------------------

// fixed aspect ratio container, ratio = width / height
@mixin aspect-ratio($width, $height){
  display: block;
  position: relative;
  overflow: hidden;

  &:before {
    display: block;
    content: "";
    width: 100%;
    padding: (100% / ($width / $height)) 0 0 0; // 100 / (w / h)
    z-index: 1;
  }

  img{
    width: 100%;
    height: 100%;
    position: absolute;
    top:0;
    left:0;
    @include object-fit-contain;
  }

  //for videos
  iframe{
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

// object-fit
@mixin object-fit-cover{
  object-fit: cover;
  font-family: 'object-fit: cover';//IE polyfill
}

@mixin object-fit-contain{
  object-fit:contain;
  font-family: 'object-fit: contain';
}

@mixin object-fit-scale-down{
  object-fit:scale-down;
  font-family: 'object-fit: scale-down';
}


/// Absolutely centers the element inside of its first non-static parent
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/// Vertically centers the element inside of its first non-static parent
@mixin vertical-center {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

/// Horizontally centers the element inside of its first non-static parent
@mixin horizontal-center {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}

/// Vertically and Horizontally center with flexbox
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}